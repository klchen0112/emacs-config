# -*- org-id-link-to-org-use-id: nil; org-complete-tags-always-offer-all-agenda-tags: nil; eval: (org-make-toc-mode t) -*-
* An Emacs Configuration
:PROPERTIES:
:TOC:      :include descendants :depth 1
:END:

[[https://akirak.cachix.org][file:https://img.shields.io/badge/cachix-akirak-blue.svg]]

This repository contains my Emacs configuration which is built using [[https://github.com/akirak/emacs-twist][emacs-twist]].
I use home-manager to install the configuration.

Note: This configuration is currently built and tested only on Linux.

For technical details, check out [[https://deepwiki.com/akirak/emacs-config][DeepWiki]].

:CONTENTS:
- [[#trying-out][Trying out]]
- [[#setupel][Setup.el]]
- [[#performance][Performance]]
- [[#supported-systems][Supported systems]]
- [[#custom-conventions][Custom conventions]]
- [[#macro-packages][Macro packages]]
- [[#built-ins][Built-ins]]
- [[#typography-settings][Typography settings]]
- [[#org][Org]]
- [[#treesit-based-major-modes][Treesit-based major modes]]
- [[#working-with-specific-services][Working with specific services]]
- [[#user-package-akirak-el][User package (akirak-*.el)]]
- [[#packages][Packages]]
- [[#software-package-management][Software package management]]
- [[#workarounds][Workarounds]]
- [[#post-init][Post init]]
- [[#notes][Notes]]
  - [[#how-to-develop-this-configuration][How to develop this configuration]]
  - [[#tag-statistics][Tag statistics]]
  - [[#web-development][Web development]]
  - [[#syntax-support][Syntax support]]
  - [[#readability][Readability]]
  - [[#artificial-intelligence--llm][Artificial intelligence / LLM]]
  - [[#extra-dependencies][Extra dependencies]]
  - [[#links][Links]]
  - [[#window-management][Window management]]
  - [[#annotating][Annotating]]
  - [[#natural-languages][Natural languages]]
  - [[#grep][Grep]]
  - [[#sh-emulation-keybindings][Sh-emulation keybindings]]
- [[#also-see][Also see]]
- [[#license][License]]
:END:
** Trying out
:PROPERTIES:
:ID:       3cc635d1-7bad-4d28-946e-e204b04aafaa
:END:
If you have Nix 2.9+ installed, you can try out the Emacs configuration without installing it.
Note: Binary cache is only available for Linux x86-64 from Cachix. If you are using other platforms such as Mac, it may take several minutes to build the packages on your machine.

There are two variants of the configuration.
One is built with the pgtk version of Emacs, which runs on Wayland:

#+begin_src bash
   nix run github:akirak/emacs-config#emacs-pgtk-on-tmpdir
#+end_src

There is another version, an X11 variant, which is now discouraged:

#+begin_src bash
   nix run github:akirak/emacs-config#emacs-on-tmpdir
#+end_src

Both commands create a temporary directory which will be used as ~user-emacs-directory~ containing an init file.
The temporary directory will be cleaned up when Emacs exits.
** Setup.el
:PROPERTIES:
:SORTING_TYPE: a
:END:
[[https://git.sr.ht/~pkal/setup][Setup.el]] is an alternative to the famous [[https://github.com/jwiegley/use-package][use-package]].
I am interested to see if it can reduce the amount of configuration code.

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'setup)
    (require 'cl-lib)

    ;; Exactly the same definition as a snippet available at
    ;; https://www.emacswiki.org/emacs/SetupEl#h5o-4 but renamed
    (defmacro define-setup-macro (name signature &rest body)
      "Shorthand for `setup-define'.
    NAME is the name of the local macro.  SIGNATURE is used as the
    argument list for FN.  If BODY starts with a string, use this as
    the value for :documentation.  Any following keywords are passed
    as OPTS to `setup-define'."
      (declare (debug defun))
      (let (opts)
        (when (stringp (car body))
          (setq opts (nconc (list :documentation (pop body))
                            opts)))
        (while (keywordp (car body))
          (let* ((prop (pop body))
                 (val `',(pop body)))
            (setq opts (nconc (list prop val) opts))))
        `(setup-define ,name
           (cl-function (lambda ,signature ,@body))
           ,@opts)))

    (define-setup-macro :package (package)
      "Fake installation of PACKAGE."
      :repeatable t
      :shorthand cadr))
#+end_src
*** :defer
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :defer (seconds &optional func)
  		      "Call a function at N seconds after init."
  		      `(add-hook 'after-init-hook
  				 (lambda ()
  				   (run-with-timer ,seconds nil
  						   ,(or func (setup-get 'hook)))))))
#+end_src
*** :set

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :set (&rest args)
     "Set the default values of variables."
     `(setq-default ,@args)))
#+end_src

Generally speaking, ~setopt~ is preferred over ~setq~, but it slows down the startup performance.
*** :nixpkgs
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :nixpkgs (&rest nixpkgs)
      "Fake installation of packages from NIXPKGS for executables."))
#+end_src
** Performance                                             :packages:
# Note: Some of these should be loaded as early as possible.
*** benchmark-init                            :profiling:initialization:
#+begin_quote
Benchmarks for require and load calls
[[https://github.com/dholm/benchmark-init-el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package benchmark-init)
    (:require benchmark-init)
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src
*** gcmh                                               :performance:
#+begin_quote
the Garbage Collector Magic Hack
#+end_quote

#+begin_src emacs-lisp
  (setup (:package gcmh)
    (:hook-into after-init-hook)
    (:set gcmh-verbose init-file-debug
          gcmh-high-cons-threshold (* 128 1024 1024)))
#+end_src
** Themes
#+begin_src emacs-lisp
  (setup themes
         (:package modus-themes))

  (setup themes
         (:package ef-themes)
         (:when-loaded
  	(:also-load modus-themes))
         (:set
  	ef-themes-take-over-modus-themes-mode 1
  	modus-themes-mixed-fonts t
  	modus-themes-italic-constructs t
  	modus-themes-disable-other-themes t)
  	(require 'modus-themes)
  	(modus-themes-load-random)
         )
#+end_src
* Editor
** Meow
#+begin_src emacs-lisp
    (setup kl
  	 (:package kl))
    
    (setup meow
           (:package meow)
           (:also-load kl-meow)
           (:with-function meow-setup (:autoload-this))
           (meow-global-mode 1)
           (meow-setup)
           )
#+end_src
** Treesitter
