# -*- org-id-link-to-org-use-id: nil; org-complete-tags-always-offer-all-agenda-tags: nil; eval: (org-make-toc-mode t) -*-
* An Emacs Configuration
:PROPERTIES:
:TOC:      :include descendants :depth 1
:END:

[[https://akirak.cachix.org][file:https://img.shields.io/badge/cachix-akirak-blue.svg]]

This repository contains my Emacs configuration which is built using [[https://github.com/akirak/emacs-twist][emacs-twist]].
I use home-manager to install the configuration.

Note: This configuration is currently built and tested only on Linux.

For technical details, check out [[https://deepwiki.com/akirak/emacs-config][DeepWiki]].

:CONTENTS:
- [[#trying-out][Trying out]]
- [[#setupel][Setup.el]]
- [[#performance][Performance]]
- [[#supported-systems][Supported systems]]
- [[#custom-conventions][Custom conventions]]
- [[#macro-packages][Macro packages]]
- [[#built-ins][Built-ins]]
- [[#typography-settings][Typography settings]]
- [[#org][Org]]
- [[#treesit-based-major-modes][Treesit-based major modes]]
- [[#working-with-specific-services][Working with specific services]]
- [[#user-package-akirak-el][User package (akirak-*.el)]]
- [[#packages][Packages]]
- [[#software-package-management][Software package management]]
- [[#workarounds][Workarounds]]
- [[#post-init][Post init]]
- [[#notes][Notes]]
  - [[#how-to-develop-this-configuration][How to develop this configuration]]
  - [[#tag-statistics][Tag statistics]]
  - [[#web-development][Web development]]
  - [[#syntax-support][Syntax support]]
  - [[#readability][Readability]]
  - [[#artificial-intelligence--llm][Artificial intelligence / LLM]]
  - [[#extra-dependencies][Extra dependencies]]
  - [[#links][Links]]
  - [[#window-management][Window management]]
  - [[#annotating][Annotating]]
  - [[#natural-languages][Natural languages]]
  - [[#grep][Grep]]
  - [[#sh-emulation-keybindings][Sh-emulation keybindings]]
- [[#also-see][Also see]]
- [[#license][License]]
:END:
** Trying out
:PROPERTIES:
:ID:       3cc635d1-7bad-4d28-946e-e204b04aafaa
:END:
If you have Nix 2.9+ installed, you can try out the Emacs configuration without installing it.
Note: Binary cache is only available for Linux x86-64 from Cachix. If you are using other platforms such as Mac, it may take several minutes to build the packages on your machine.

There are two variants of the configuration.
One is built with the pgtk version of Emacs, which runs on Wayland:

#+begin_src bash
   nix run github:akirak/emacs-config#emacs-pgtk-on-tmpdir
#+end_src

There is another version, an X11 variant, which is now discouraged:

#+begin_src bash
   nix run github:akirak/emacs-config#emacs-on-tmpdir
#+end_src

Both commands create a temporary directory which will be used as ~user-emacs-directory~ containing an init file.
The temporary directory will be cleaned up when Emacs exits.
** Setup.el
:PROPERTIES:
:SORTING_TYPE: a
:END:
[[https://git.sr.ht/~pkal/setup][Setup.el]] is an alternative to the famous [[https://github.com/jwiegley/use-package][use-package]].
I am interested to see if it can reduce the amount of configuration code.

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'setup)
    (require 'cl-lib)

    ;; Exactly the same definition as a snippet available at
    ;; https://www.emacswiki.org/emacs/SetupEl#h5o-4 but renamed
    (defmacro define-setup-macro (name signature &rest body)
      "Shorthand for `setup-define'.
    NAME is the name of the local macro.  SIGNATURE is used as the
    argument list for FN.  If BODY starts with a string, use this as
    the value for :documentation.  Any following keywords are passed
    as OPTS to `setup-define'."
      (declare (debug defun))
      (let (opts)
        (when (stringp (car body))
          (setq opts (nconc (list :documentation (pop body))
                            opts)))
        (while (keywordp (car body))
          (let* ((prop (pop body))
                 (val `',(pop body)))
            (setq opts (nconc (list prop val) opts))))
        `(setup-define ,name
           (cl-function (lambda ,signature ,@body))
           ,@opts)))

    (define-setup-macro :package (package)
      "Fake installation of PACKAGE."
      :repeatable t
      :shorthand cadr))
#+end_src
*** :auto-insert
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 23:59]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :auto-insert (&rest entries)
     "Add ENTRIES to `auto-insert-alist'."
     `(with-eval-after-load 'autoinsert
        (dolist (entry (reverse ',entries))
          (add-to-list 'auto-insert-alist entry)))))
#+end_src
*** :defer
:PROPERTIES:
:CREATED_TIME: [2022-02-03 Thu 15:19]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :defer (seconds &optional func)
      "Call a function at N seconds after init."
      `(add-hook 'after-init-hook
                 (lambda ()
                   (run-with-timer ,seconds nil
                                   ,(or func (setup-get 'hook)))))))
#+end_src
*** :el-patch
:PROPERTIES:
:CREATED_TIME: [2022-12-30 Fri 23:59]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (setup-define :el-patch
      (lambda (&rest body)
        `(when (require 'el-patch nil t)
           ,@body))
      :documentation "Evaluate el-patch definitions."
      :debug '(setup)
      :after-loaded t
      :indent 0))
#+end_src
*** :embark
:PROPERTIES:
:CREATED_TIME: [2022-04-24 Sun 17:26]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :embark (map interactive &rest bindings)
     "Proxy or bind embark bindings."
     :indent 2
     `(with-eval-after-load 'embark
        ,@(cl-loop for (key cmd name) in bindings
                   collect `(keymap-set ,map ,key
                                        ,(if interactive
                                             `(defun ,name (arg)
                                                (interactive ,interactive)
                                                (,cmd arg))
                                           `(quote ,cmd)))))))
#+end_src
*** :ffap
:PROPERTIES:
:CREATED_TIME: [2025-05-19 Mon 21:47]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :ffap (func)
     "Add a mode-specific entry to ffap-alist."
     (let ((symbol (if (symbolp func)
                       func
                     (eval func)))
           (mode (setup-get 'mode)))
       `(with-eval-after-load 'ffap
          (add-to-list 'ffap-alist '(,mode . ,symbol))))))
#+end_src
*** :global-keymap
:PROPERTIES:
:CREATED_TIME: [2025-02-15 Sat 14:44]
:END:
#+begin_src elisp
  (eval-when-compile
    (define-setup-macro
     :global-keymap (key command)
     "Use `keymap-global-set' to define global keybindings."
     :repeatable t
     `(keymap-global-set ,key ,command)))
#+end_src
*** :huan
:PROPERTIES:
:CREATED_TIME: [2022-02-27 Sun 21:38]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :huan (&rest entries)
     "Add ENTRIES to `huan-mode-symbols-alist' for the mode."
     :indent 0
     `(with-eval-after-load 'huan
        (let ((mode ',(setup-get 'mode))
              (entries ',entries))
          (if-let* ((cell (assq mode huan-mode-symbols-alist)))
              (let ((sym (make-symbol "entries")))
                (set sym (cdr cell))
                (dolist (ent (reverse entries))
                  (add-to-list sym ent))
                (setcdr cell (symbol-value sym)))
            (push (cons mode entries)
                  huan-mode-symbols-alist))))))
#+end_src
*** :keymap
:PROPERTIES:
:CREATED_TIME: [2025-02-15 Sat 14:32]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :keymap (key command)
     "Use `keymap-set' to define keybindings."
     :after-loaded t
     :repeatable t
     `(keymap-set ,(setup-get 'map) ,key ,command)))
#+end_src
*** :keymap-unset
:PROPERTIES:
:CREATED_TIME: [2025-02-15 Sat 14:39]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :keymap-unset (key)
     "Use `keymap-unset' to define keybindings."
     :after-loaded t
     :repeatable t
     `(keymap-unset ,(setup-get 'map) ,key)))
#+end_src
*** :mode-project-roots
:PROPERTIES:
:CREATED_TIME: [2024-02-12 Mon 10:19]
:END:

Specify extra root files to help eglot correctly identify project roots.

#+begin_src emacs-lisp
  (defvar akirak-project-per-mode-root-files nil)

  (eval-when-compile
    (define-setup-macro
     :mode-project-roots (&rest filenames)
     "Define file names indicating the project root."
     `(add-to-list 'akirak-project-per-mode-root-files
                   (cons ',(setup-get 'mode) ',filenames)
                   nil
                   (lambda (x y) (eq (car x) (car y))))))
#+end_src
*** :mode-repl
:PROPERTIES:
:CREATED_TIME: [2022-01-31 Mon 19:41]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :mode-repl (repl-fn)
      "Add an entry to `rtog/mode-repl-alist'."
      `(progn
         (with-eval-after-load 'repl-toggle
           (push (cons ',(setup-get 'mode) ',repl-fn)
                 rtog/mode-repl-alist))
         (add-hook ',(setup-get 'hook)
                   #'repl-toggle-mode))))
#+end_src
*** :nixpkgs
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :nixpkgs (&rest nixpkgs)
      "Fake installation of packages from NIXPKGS for executables."))
#+end_src
*** :org-babel-language
#+begin_src elisp
  (eval-when-compile
    (define-setup-macro
     :org-babel-language (t-or-language)
     "Define file names indicating the project root."
     (let ((language (if (eq t-or-language t)
                         (thread-last
                           (setup-get 'feature)
                           (symbol-name)
                           (string-remove-prefix "ob-")
                           (intern))
                       t-or-language)))
       `(with-eval-after-load 'ob
          (cl-pushnew '(,language . t) org-babel-load-languages)))))
#+end_src
*** :org-open
:PROPERTIES:
:CREATED_TIME: [2023-07-22 Sat 10:28]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :org-open (file command &rest plist)
     `(with-eval-after-load 'org
        (cl-pushnew (cons ,file
                          ,(if (plist-get plist :file)
                               `(defun ,(intern (format "akirak/org-open-%s"
                                                        (if (string-match (rx (+ alnum)) file)
                                                            (match-string 0 file)
                                                          file)))
                                    (filename _)
                                  (,command filename))
                             `,command))
                    org-file-apps))))
#+end_src
*** :org-src-lang
:PROPERTIES:
:CREATED_TIME: [2023-01-23 Mon 19:37]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :org-src-lang (&rest langs)
     "Add an entry to `org-src-lang-modes' for the mode."
     `(with-eval-after-load "org-src"
        (dolist (lang ',langs)
          (let ((name ',(thread-last
                          (setup-get 'mode)
                          (symbol-name)
                          (string-remove-suffix "-mode"))))
            (add-to-list 'org-src-lang-modes
                         (cons (if (stringp lang)
                                   lang
                                 (string-remove-suffix "-ts" name))
                               (intern name))))))))
#+end_src
*** :org-template
#+begin_src elisp
  (eval-when-compile
    (define-setup-macro
     :org-template (file)
     "Load templates from the Org file."
     `(when (or (eq t akirak/enabled-status-tags)
                (memq 'personal akirak/enabled-status-tags))
        (add-hook ',(setup-get 'hook)
                  (lambda () (akirak-org-dog-use-templates ,file))))))

#+end_src
*** :package-files
:PROPERTIES:
:CREATED_TIME: [2023-12-16 Sat 12:56]
:END:

#+begin_src emacs-lisp
  (defvar akirak-consult-package-files nil)
  (defvar akirak-project-vc-extra-root-markers nil
    "Swap for `project-vc-extra-root-markers'.

  `project-vc-extra-root-markers' slows down Emacs in many ways, so I
  prefer keeping it empty throughout most of the time. Use
  `akirak-project-with-extra-vc-root-markers' macro to explicitly declare
  when you need the extra root markers.")

  (eval-when-compile
    (define-setup-macro
     :package-files (&rest filenames)
     "Define file names of package files."
     `(dolist (filename ',filenames)
        (add-to-list 'akirak-consult-package-files filename)
        (add-to-list 'akirak-project-vc-extra-root-markers filename))))
#+end_src
*** :project-roots
:PROPERTIES:
:CREATED_TIME: [2024-12-08 Sun 23:37]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :project-roots (&rest globs)
     (dolist (glob globs)
       (add-to-list 'akirak-project-vc-extra-root-markers glob))))
#+end_src
*** :reformatters
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 23:59]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :reformatters (&rest entries)
     "Define reformatters."
     (let ((feature (setup-get 'feature)))
       (macroexp-progn
        (mapcar (pcase-lambda (`(,name . ,args))
                  `(reformatter-define ,name ,@args))
                entries)))))
#+end_src
*** :repeat
:PROPERTIES:
:CREATED_TIME: [2022-08-04 Thu 23:54]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :repeat (keymap &rest commands)
     "Set the repeat map of commands."
     :indent 1
     (dolist (cmd commands)
       (put cmd 'repeat-map keymap))))
#+end_src
*** :set
:PROPERTIES:
:CREATED_TIME: [2022-02-28 Mon 11:30]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :set (&rest args)
     "Set the default values of variables."
     `(setq-default ,@args)))
#+end_src

Generally speaking, ~setopt~ is preferred over ~setq~, but it slows down the startup performance.
*** :status
By default, settings inside =:status= clauses are not loaded.

#+begin_src emacs-lisp
  (defvar akirak/enabled-status-tags nil)

  (eval-when-compile
    (define-setup-macro :status (tag &rest progn)
      "Conditionally expand the macro."
      :indent 1
      (when (or (eq t akirak/enabled-status-tags)
                (memq tag akirak/enabled-status-tags))
        (macroexp-progn progn))))
#+end_src
** Performance                                             :packages:
# Note: Some of these should be loaded as early as possible.
*** benchmark-init                            :profiling:initialization:
#+begin_quote
Benchmarks for require and load calls
[[https://github.com/dholm/benchmark-init-el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package benchmark-init)
    (:require benchmark-init)
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src
*** gcmh                                               :performance:
#+begin_quote
the Garbage Collector Magic Hack
#+end_quote

#+begin_src emacs-lisp
  (setup (:package gcmh)
    (:hook-into after-init-hook)
    (:set gcmh-verbose init-file-debug
          gcmh-high-cons-threshold (* 128 1024 1024)))
#+end_src
** Themes
#+begin_src emacs-lisp
  (setup (:package ef-themes)
         (:set
  	ef-themes-take-over-modus-themes-mode 1
  	modus-themes-mixed-fonts t
  	modus-themes-italic-constructs t
  	modus-themes-disable-other-themes t)
         (
  	 (require 'ef-themes)
  	 (modus-themes-load-random)
  	 ))
#+end_src
