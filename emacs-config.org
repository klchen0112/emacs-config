# -*- org-id-link-to-org-use-id: nil; org-complete-tags-always-offer-all-agenda-tags: nil; eval: (org-make-toc-mode t) -*-
* An Emacs Configuration
:PROPERTIES:
:TOC:      :include descendants :depth 1
:END:

[[https://akirak.cachix.org][file:https://img.shields.io/badge/cachix-akirak-blue.svg]]

This repository contains my Emacs configuration which is built using [[https://github.com/akirak/emacs-twist][emacs-twist]].
I use home-manager to install the configuration.

Note: This configuration is currently built and tested only on Linux.

For technical details, check out [[https://deepwiki.com/akirak/emacs-config][DeepWiki]].

:CONTENTS:
- [[#trying-out][Trying out]]
- [[#setupel][Setup.el]]
- [[#performance][Performance]]
- [[#supported-systems][Supported systems]]
- [[#custom-conventions][Custom conventions]]
- [[#macro-packages][Macro packages]]
- [[#built-ins][Built-ins]]
- [[#typography-settings][Typography settings]]
- [[#org][Org]]
- [[#treesit-based-major-modes][Treesit-based major modes]]
- [[#working-with-specific-services][Working with specific services]]
- [[#user-package-akirak-el][User package (akirak-*.el)]]
- [[#packages][Packages]]
- [[#software-package-management][Software package management]]
- [[#workarounds][Workarounds]]
- [[#post-init][Post init]]
- [[#notes][Notes]]
  - [[#how-to-develop-this-configuration][How to develop this configuration]]
  - [[#tag-statistics][Tag statistics]]
  - [[#web-development][Web development]]
  - [[#syntax-support][Syntax support]]
  - [[#readability][Readability]]
  - [[#artificial-intelligence--llm][Artificial intelligence / LLM]]
  - [[#extra-dependencies][Extra dependencies]]
  - [[#links][Links]]
  - [[#window-management][Window management]]
  - [[#annotating][Annotating]]
  - [[#natural-languages][Natural languages]]
  - [[#grep][Grep]]
  - [[#sh-emulation-keybindings][Sh-emulation keybindings]]
- [[#also-see][Also see]]
- [[#license][License]]
:END:
** Trying out
:PROPERTIES:
:ID:       3cc635d1-7bad-4d28-946e-e204b04aafaa
:END:
If you have Nix 2.9+ installed, you can try out the Emacs configuration without installing it.
Note: Binary cache is only available for Linux x86-64 from Cachix. If you are using other platforms such as Mac, it may take several minutes to build the packages on your machine.

There are two variants of the configuration.
One is built with the pgtk version of Emacs, which runs on Wayland:

#+begin_src bash
   nix run github:akirak/emacs-config#emacs-pgtk-on-tmpdir
#+end_src

There is another version, an X11 variant, which is now discouraged:

#+begin_src bash
   nix run github:akirak/emacs-config#emacs-on-tmpdir
#+end_src

Both commands create a temporary directory which will be used as ~user-emacs-directory~ containing an init file.
There temporary directory will be cleaned up when Emacs exits.
* Constants
#+begin_src emacs-lisp
  ;;; init.el --- default file -*- lexical-binding: t; -*-
  ;; 判断操作系统类型
  (defconst IS-MAC (eq system-type 'darwin))
  (defconst IS-LINUX (eq system-type 'gnu/linux))
  (defconst IS-WINDOWS (eq system-type 'windows-nt))

#+end_src
* Setup.el
:PROPERTIES:
:SORTING_TYPE: a
:END:
[[https://git.sr.ht/~pkal/setup][Setup.el]] is an alternative to the famous [[https://github.com/jwiegley/use-package][use-package]].
I am interested to see if it can reduce the amount of configuration code.

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'setup)
    (require 'cl-lib)

    ;; Exactly the same definition as a snippet available at
    ;; https://www.emacswiki.org/emacs/SetupEl#h5o-4 but renamed
    (defmacro define-setup-macro (name signature &rest body)
      "Shorthand for `setup-define'.
    NAME is the name of the local macro.  SIGNATURE is used as the
    argument list for FN.  If BODY starts with a string, use this as
    the value for :documentation.  Any following keywords are passed
    as OPTS to `setup-define'."
      (declare (debug defun))
      (let (opts)
        (when (stringp (car body))
          (setq opts (nconc (list :documentation (pop body))
                            opts)))
        (while (keywordp (car body))
          (let* ((prop (pop body))
                 (val `',(pop body)))
            (setq opts (nconc (list prop val) opts))))
        `(setup-define ,name
           (cl-function (lambda ,signature ,@body))
           ,@opts)))

    (define-setup-macro :package (package)
      "Fake installation of PACKAGE."
      :repeatable t
      :shorthand cadr))
#+end_src
** :defer
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :defer (seconds &optional func)
  		      "Call a function at N seconds after init."
  		      `(add-hook 'after-init-hook
  				 (lambda ()
  				   (run-with-timer ,seconds nil
  						   ,(or func (setup-get 'hook)))))))
#+end_src
** :set

#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro
     :set (&rest args)
     "Set the default values of variables."
     `(setq-default ,@args)))
#+end_src

Generally speaking, ~setopt~ is preferred over ~setq~, but it slows down the startup performance.
** :nixpkgs
#+begin_src emacs-lisp
  (eval-when-compile
    (define-setup-macro :nixpkgs (&rest nixpkgs)
      "Fake installation of packages from NIXPKGS for executables."))
#+end_src
* Library
*** kl
#+begin_src emacs-lisp
  (setup (:package kl))
#+end_src
* Performance                                             :packages:
# Note: Some of these should be loaded as early as possible.
*** benchmark-init                            :profiling:initialization:
#+begin_quote
Benchmarks for require and load calls
[[https://github.com/dholm/benchmark-init-el]]
#+end_quote

#+begin_src emacs-lisp
  (setup (:package benchmark-init)
         (:require benchmark-init)
         (:only-if init-file-debug
  		 (add-hook 'after-init-hook 'benchmark-init/deactivate))
         )
#+end_src
*** gcmh                                               :performance:
#+begin_quote
the Garbage Collector Magic Hack
#+end_quote

#+begin_src emacs-lisp
  (setup (:package gcmh)
    (:hook-into after-init-hook)
    (:set gcmh-verbose init-file-debug
          gcmh-high-cons-threshold (* 128 1024 1024)))
#+end_src
* Themes
#+begin_src emacs-lisp
  (setup themes
         (:package ef-themes)
         (:when-loaded
  	(:also-load modus-themes))
         (:set
  	ef-themes-take-over-modus-themes-mode 1
  	modus-themes-mixed-fonts t
  	modus-themes-italic-constructs t
  	modus-themes-disable-other-themes t)
         (require 'ef-themes)
         (modus-themes-load-random)
         )
#+end_src
*** display-line-number
#+begin_src emacs-lisp
  (setup display-fill-column-indicator (:hook-into prog-mode))
  (setup display-line-numbers (:hook-into prog-mode)
         (:set display-line-numbers-width 2
  	     display-line-numbers-type 'relative))
#+end_src

*** Scroll
#+begin_src emacs-lisp

  (setup pixel-scroll
         (:only-if  (version<= "29" emacs-version)
  		  (:with-mode pixel-scroll-precision-mode
  			      ;; TODO: Find a better way to hook the minor mode
  			      (:hook-into find-file-hook
  					  help-mode-hook))))
#+end_src
*** Font
#+begin_src emacs-lisp
  ;; Main typeface
  (set-face-attribute 'default nil :family "M+1Code Nerd Font Propo" :height 160)

  ;; Proportionately spaced typeface
  (set-face-attribute 'variable-pitch nil :family "M+1Code Nerd Font Propo" :height 1.0)

  ;; Monospaced typeface
  (set-face-attribute 'fixed-pitch nil :family "M+1Code Nerd Font Propo" :height 1.0)

  ;; symbol fonts
  (set-fontset-font t 'symbol   (font-spec :family "Apple Symobols"     ))
  (set-fontset-font t 'symbol   (font-spec :family "Apple Color Emoji"  ))
  (set-fontset-font t 'symbol   (font-spec :family "Symbola"            ))
  (set-fontset-font t 'symbol   (font-spec :family "Noto Color Emoji"   ))
  (set-fontset-font t 'symbol   (font-spec :family "Liberation Mono"    ))
  (set-fontset-font t 'symbol   (font-spec :family "Noto Sans Symbols2" ))
  (set-fontset-font t 'symbol   (font-spec :family "Segoe UI Emoji"     ))
  (set-fontset-font t 'symbol   (font-spec :family "FreeSerif"          ))
  (set-fontset-font t 'symbol   (font-spec :family "Twitter Color Emoji"))
  ;; i18n 
  ;; East Asia: 你好, 早晨, こんにちは, 안녕하세요
  (set-fontset-font t 'han      (font-spec :family "TsangerJinKai05"   ))
  (set-fontset-font t 'kana      (font-spec :family "TsangerJinKai05"   ))
  (set-fontset-font t 'hangul      (font-spec :family "TsangerJinKai05"   ))
  (set-fontset-font t 'cjk-misc (font-spec :family "Noto Serif CJK SC" ))
  ;; Cyrillic: Привет, Здравствуйте, Здраво, Здравейте
  (set-fontset-font t 'cyrillic (font-spec :family "Noto Serif"         ))
#+end_src

**** Nerd-icons
#+begin_src emacs-lisp
  (setup nerd-icons
         (:package nerd-icons)
  )
#+end_src
*** Modeline and dashboard
#+begin_src emacs-lisp
  (setup dashboard
         (:package dashboard)
         (:set  dashboard-icon-type 'nerd-icons)
         (dashboard-setup-startup-hook)
         )

  (setup doom-modeline
         (:package doom-modeline)
         (:hook-into after-init-hook)
         (:hook size-indication-mode)
         (:hook column-number-mode)
         )
#+end_src
** Which-key
#+begin_src emacs-lisp
  (setup which-key
         (:package which-key)
         (:hook-into after-init-hook)
         (:set which-key-idle-delay 0.3)
         )
#+end_src
* Editor
** Meow
#+begin_src emacs-lisp
  (setup meow
         (:package meow)
         (:also-load kl-meow)
         (:also-load meow-tree-sitter)
         (:with-function meow-setup (:autoload-this))
         (meow-global-mode 1)
         (meow-setup)
         )
  (setup meow-tree-sitter
         (:package meow-tree-sitter)
         (:also-load treesit)
         (:when-loaded (meow-tree-sitter-register-defaults)))
#+end_src
** Treesit 
#+begin_src emacs-lisp
  (setup treesit
         (:only-if (fboundp 'treesit-available-p))
         (:also-load treesit-fold)
         )
  (setup treesit-fold
         (:only-if (fboundp 'treesit-available-p))
         (:package treesit-fold)
         )
#+end_src
** Editor-config
#+begin_src emacs-lisp
  (setup editorconfig)
#+end_src
* Inputmethod
#+begin_src emacs-lisp
  (setup sis
         (:package sis)
         (:only-if (or IS-MAC IS-LINUX))
         (:set sis-ism-lazyman-config '(
  				     "com.apple.keylayout.UnicodeHexInput"
  				     "im.rime.inputmethod.Squirrel.Rime"
  				     )
  	     sis-global-cursor-color-mode t
  	     sis-global-respect-mode t
  	     sis-global-context-mode t
  	     sis-global-inline-mode t
  	     )
         (add-hook 'meow-insert-exit-hook #'sis-set-english)
         )

;;  (setup rime
;;         (:package rime)
;;         (:defer 1)
;;         (:set rime-user-data-dir (if IS-LINUX "~/.local/share/fcitx5/rime"
;;  				  "~/Library/Rime")
;;
;;  	     rime-show-candidate 'posframe
;;  	     rime-show-preedit 'inline
;;  	     default-input-method "rime"
;;  	     rime-inline-ascii-trigger 'shift-r
;;  	     rime-translate-keybindings '("C-f" "C-b" "C-n" "C-p" "C-g" "<left>" "<right>" "<up>" "<down>" "<prior>" "<next>" "<delete>"))
;;         )

#+end_src
* Env & shell
* Writing
* Programming

** eglot
#+begin_src emacs-lisp
  (setup eglot
         (:package eglot)
         (:also-load consult-eglot)
         (:also-load consult-eglot-embark)
         (:also-load eglot-booster)
         (:set eglot-autoshutdown t)
         (defun eglot-setup-eldoc ()
  	 (setq-local eldoc-documentation-functions '(flymake-eldoc-function
  						     eglot-signature-eldoc-function
  						     eglot-hover-eldoc-function)))
         (:hook 'eglot-setup-eldoc)
         )

  (setup consult-eglot
         (:package consult-eglot)
         )

  (setup consult-eglot-embark
         (:package consult-eglot-embark)
         (with-eval-after-load 'eglot
  	 (with-eval-after-load 'embark
  	   (with-eval-after-load 'consult-eglot
  	     (require 'consult-eglot-embark))))

         (:when-loaded consult-eglot-embark-mode)
         )

  (setup eglot-booster
         (:package eglot-booster)
         (:set eglot-booster-io-only t)
         (:when-loaded (eglot-booster-mode))
         )
#+end_src
** Completion
*** Vertico, orderless and marginalia
#+begin_src emacs-lisp
  (setup orderless
         (:package orderless)
         (:set
  	completion-styles '(orderless basic)
  	completion-category-overrides '((file (styles partial-completion)))
  	completion-category-defaults nil ;; Disable defaults, use our settings
  	completion-pcm-leading-wildcard t
  	orderless-component-separator #'orderless-escapable-split-on-space
  	)
         )

  (setup vertico
         (:package vertico)
         (:also-load orderless)
         (:also-load marginalia)
         (:hook-into after-init-hook)
         (:set vertico-cycle t)
         )

  (setup marginalia
         (:package marginalia)
         (:also-load nerd-icons-completion)
         (:hook-into after-init-hook))


  (setup nerd-icons-completion
         (:package nerd-icons-completion)
         (:also-load nerd-icons)
         (:when-loaded
  	(add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
         )
#+end_src
*** Embark and consult
#+begin_src emacs-lisp
  (setup embark
         (:package embark))
  (setup consult
         (:package consult))
  (setup embark-consult
         (:package embark-consult)
         (with-eval-after-load 'consult
  	 (with-eval-after-load 'embark
  	   (require 'embark-consult)))
         (:with-mode embark-collect-mode
  		   (:hook consult-preview-at-point-mode))
         )
#+end_src
*** Corfu
#+begin_src emacs-lisp
  (setup corfu
         (:package corfu)
         (:with-mode global-corfu-mode
  		   (:hook-into after-init-hook))
         ;; load features
         (:also-load nerd-icons-corfu)
         (:with-feature corfu-popupinfo
  		      (:set corfu-popupinfo-delay '(0.5 . 1.0))
  		      (:hook-into corfu-mode-hook))
         (:with-feature corfu-history
  		      (:hook-into corfu-mode-hook)
  		      )
         (:set
  	corfu-auto t
  	corfu-atuo-refix 2
  	corfu-cycle t
  	corfu-preselect 'prompt
  	corfu-count 16
  	corfu-max-width 120
  	corfu-on-exact-match nil
  	corfu-quit-at-boundary     'separator
  	tab-always-indent 'complete))

  (setup nerd-icons-corfu
         (:package nerd-icons-corfu)
         (:also-load nerd-icons)
         )

  (setup cape
         (:package cape)
         (add-hook 'completion-at-point-functions #'cape-dabbrev)
         (add-hook 'completion-at-point-functions #'cape-file)
         (add-hook 'completion-at-point-functions #'cape-elisp-block)
         )
#+end_src
*** snippest

#+begin_src emacs-lisp

  (setup tempel
         (:package tempel)
         (:also-load tempel-collection)
         (:set tempel-trigger-prefix "<")


         ;; Setup completion at point
         (defun tempel-setup-capf ()
  	 ;; Add the Tempel Capf to `completion-at-point-functions'.
  	 ;; `tempel-expand' only triggers on exact matches. Alternatively use
  	 ;; `tempel-complete' if you want to see all matches, but then you
  	 ;; should also configure `tempel-trigger-prefix', such that Tempel
  	 ;; does not trigger too often when you don't expect it. NOTE: We add
  	 ;; `tempel-expand' *before* the main programming mode Capf, such
  	 ;; that it will be tried first.
  	 (setq-local completion-at-point-functions
  		     (cons #'tempel-expand
  			   completion-at-point-functions)))

         (add-hook 'conf-mode-hook 'tempel-setup-capf)
         (add-hook 'prog-mode-hook 'tempel-setup-capf)
         (add-hook 'text-mode-hook 'tempel-setup-capf)

         )

  (setup tempel-collection
         (:package tempel-collection)
         )
#+end_src
** Version Control (Git)
** Env
#+begin_src emacs-lisp
  (setup envrc
         (:package envrc)
         (:with-mode envrc-global-mode
  		   (:hook-into after-init-hook)))

  (setup direnv
         (:package direnv)
         
  )
  	      
#+end_src
* Lang
** Nix
#+begin_src emacs-lisp
  (setup nix-mode
         (:package nix-mode))
  (setup nix-ts-mode
         (:package nix-ts-mode)
         (:file-match "\\.nix\\'")
         (:with-mode nix-base-mode
  		   (:hook eglot-ensure)
  		   )
         )
#+end_src
